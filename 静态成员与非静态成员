在 C++ 中，非静态成员（non-static members）是指属于类的实例（对象）的成员变量或成员函数。与静态成员不同，非静态成员是与每个类的对象相关联的，而静态成员则是与类本身相关联的，所有类的实例共享同一个静态成员。

非静态成员的特点
属于对象：非静态成员是属于类的每个对象的。每个类的实例（对象）都有自己的副本。
访问方式：非静态成员必须通过类的对象来访问，可以使用 .（点运算符） 或 ->（箭头运算符） 来访问。对于类的对象，使用点运算符；对于指向类对象的指针，使用箭头运算符。
例子：非静态成员
cpp
复制代码
#include <iostream>

class MyClass {
public:
    int a;  // 非静态成员变量
    void print() {  // 非静态成员函数
        std::cout << "a = " << a << std::endl;
    }
};

int main() {
    MyClass obj;        // 创建类的一个对象
    obj.a = 10;          // 使用点运算符访问非静态成员变量
    obj.print();         // 使用点运算符调用非静态成员函数
    
    MyClass* ptr = &obj; // 创建指向 obj 的指针
    ptr->a = 20;         // 使用箭头运算符访问非静态成员
    ptr->print();        // 使用箭头运算符调用非静态成员函数

    return 0;
}
输出结果：
css
复制代码
a = 10
a = 20
解释：
非静态成员变量 a：
a 是一个非静态成员变量，每个 MyClass 类型的对象都有一个 a 的副本。
在 main 函数中，obj.a 表示访问对象 obj 的 a 成员变量。
非静态成员函数 print()：
print() 是一个非静态成员函数，它在对象实例上被调用。在代码中，obj.print() 通过对象 obj 来调用该成员函数。
访问方式：
使用 点运算符（.） 来访问对象的非静态成员。例如，obj.a 和 obj.print()。
使用 箭头运算符（->） 来访问指针指向的对象的非静态成员。例如，ptr->a 和 ptr->print()。
非静态成员与静态成员的区别
非静态成员：
每个对象有独立的副本。
访问时必须通过对象（使用点运算符 .）或指向对象的指针（使用箭头运算符 ->）。
静态成员：
所有对象共享同一个静态成员，静态成员是类级别的，而不是对象级别的。
访问静态成员时，可以通过类名和作用域解析运算符 ::，也可以通过类的对象访问，但建议通过类名访问。
例子：静态成员
cpp
复制代码
#include <iostream>

class MyClass {
public:
    static int count;  // 静态成员变量
    MyClass() { count++; }  // 构造函数，每创建一个对象，count 增加 1
};

// 初始化静态成员变量
int MyClass::count = 0;

int main() {
    MyClass obj1;  // 创建第一个对象，count 增加 1
    MyClass obj2;  // 创建第二个对象，count 增加 1

    std::cout << "Total objects created: " << MyClass::count << std::endl;  // 通过类名访问静态成员

    return 0;
}
输出结果：
mathematica
复制代码
Total objects created: 2
总结
非静态成员是与每个对象实例相关的，属于对象的成员变量和成员函数。它们的访问需要通过对象（点运算符 .）或指针（箭头运算符 ->）来进行。
静态成员是与类本身相关的，所有对象共享同一个静态成员。它们的访问可以通过类名和作用域解析运算符 :: 进行，也可以通过对象访问，但通常推荐通过类名访问。
